- hosts: all
  vars_files:
  pre_tasks:
  roles:
  tasks:
  - name: Update and upgrade packages
    become: yes
    apt:
      update_cache: yes
      upgrade: yes
  - name: Install pre-requisites
    become: yes
    apt:
      name: "{{packages}}"
    vars:
      packages:
        - apt-transport-https
        - curl
        - docker.io
        - unzip
        - nfs-common
        - net-tools
  - name: Start Docker
    become: yes
    service:
      name: docker.service
      enabled: yes
      state: started
- hosts: clusterio
  vars_files:
  pre_tasks:
  roles:
  tasks:
  - name: Install tools
    become: yes
    apt:
      name: "{{packages}}"
      update_cache: yes
    vars:
      packages:
        - docker-compose
        - python3-pip
        - etcd-client
        - nfs-kernel-server
  - name: Pip install
    become: yes
    pip:
      name:
        - docker
        - docker-compose
  - name: Disable resolver
    become: yes
    service:
      name: systemd-resolved
      enabled: no
      state: stopped
  - name: Set hosts
    become: yes
    lineinfile:
      path: /etc/hosts
      line: "127.0.53.1 {{hostname}}"
      state: present
  - name: Replace resolv.conf for temporary
    become: yes
    copy:
      src: files/resolv.conf.tmp
      dest: /etc/resolv.conf
  - name: Copy docker-compose file for coredns
    become: yes
    copy:
      src: files/coredns/
      dest: /opt/coredns
  - name: Tear down existing coredns
    become: yes
    docker_compose:
      project_name: coredns
      project_src: /opt/coredns
      state: absent
  - name: Run coredns
    become: yes
    docker_compose:
      project_name: coredns
      project_src: /opt/coredns
  - name: Replace resolv.conf for CoreDNS
    become: yes
    copy:
      src: files/resolv.conf
      dest: /etc/resolv.conf
  - name: Add dns records for all nodes
    shell: "etcdctl set /coredns/{{domain}}/{{stage}}/{{cluster_type}}/{{hostvars[host]['hostname']}} '{\"host\": \"{{host}}\"}'"
    loop: "{{groups['all']}}"
    loop_control:
      loop_var: host
  - name: Add dns records for master frontend
    shell: "etcdctl set /coredns/{{domain}}/{{stage}}/{{cluster_type}}/master '{\"host\": \"{{inventory_hostname}}\"}'"
  - name: Add dns records for service frontend
    shell: "etcdctl set /coredns/{{domain}}/{{stage}}/{{cluster_type}}/master '{\"host\": \"{{inventory_hostname}}\"}'"
  - name: Create directory for nginx-lb
    become: yes
    file:
      path: /opt/nginx-lb
      state: directory
  - name: Copy nginx.conf
    become: yes
    copy:
      src: files/nginx.conf
      dest: /opt/nginx-lb/nginx.conf
  - name: Copy nginx-default.conf
    become: yes
    copy:
      src: files/nginx-default.conf
      dest: /opt/nginx-lb/default.conf
  - name: Copy nginx-apiserver.conf
    become: yes
    copy:
      src: files/nginx-apiserver.conf
      dest: /opt/nginx-lb/apiserver.conf
  - name: Add masters into apiserver.conf
    become: yes
    lineinfile:
      path: /opt/nginx-lb/apiserver.conf
      line: "  server {{hostvars[host]['hostname']}}.{{cluster_type}}.{{stage}}.{{domain}}:6443;"
      insertafter: "# masters"
      state: present
    loop: "{{groups['master']}}"
    loop_control:
      loop_var: host
  - name: Run nginx container for load balancer
    become: yes
    docker_container:
      name: nginx
      image: nginx
      state: started
      recreate: yes
      restart_policy: always
      network_mode: host
      volumes:
        - /opt/nginx-lb/nginx.conf:/etc/nginx/nginx.conf
        - /opt/nginx-lb/default.conf:/etc/nginx/conf.d/default.conf
        - /opt/nginx-lb/apiserver.conf:/etc/nginx/conf.d/apiserver.conf
  - name: Set hostname with domain
    become: yes
    shell: hostnamectl set-hostname {{hostvars[inventory_hostname]['hostname']}}.{{cluster_type}}.{{stage}}.{{domain}}
  - name: Create directory for nfs
    become: yes
    file:
      path: /opt/nfs
      state: directory
  - name: Copy exports
    become: yes
    copy:
      src: files/exports
      dest: /etc/exports
  - name: Restart nfs-server
    become: yes
    shell: systemctl restart nfs-server
  post_tasks:
  handlers:
- hosts:
  - master
  - worker
  vars_files:
  pre_tasks:
  roles:
  tasks:
  - name: Stop docker
    become: yes
    service:
      name: docker.socket
      enabled: no
      state: stopped
  - name: Copy containerd.conf
    become: yes
    copy:
      src: files/containerd.conf
      dest: /etc/modules-load.d/containerd.conf
  - name: Copy 99-kubernetes-cri.conf
    become: yes
    copy:
      src: files/99-kubernetes-cri.conf
      dest: /etc/sysctl.d/99-kubernetes-cri.conf
  - name: Apply sysctl params
    become: yes
    shell: sysctl --system
  - name: Make directory for containerd
    become: yes
    shell: mkdir -p /etc/containerd
  - name: Setup containerd as CRI runtime
    become: yes
    shell: containerd config default | sudo sed -e 's/SystemdCgroup = false/SystemdCgroup = true/' > /etc/containerd/config.toml
  - name: Restart containerd
    become: yes
    shell: systemctl restart containerd
  - name: Add apt-key for google cloud
    become: yes
    shell: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  - name: Add apt source for kubernetes
    become: yes
    shell: echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
  - name: Install k8s tools
    become: yes
    apt:
      name: "{{packages}}"
      update_cache: yes
    vars:
      packages:
        - kubelet={{k8s_version}}-00
        - kubeadm={{k8s_version}}-00
        - kubectl={{k8s_version}}-00
  - name: Start kubelet
    become: yes
    service:
      name: kubelet
      enabled: yes
      state: started
  - name: Mark k8s tools as hold
    become: yes
    shell: apt-mark hold kubelet kubeadm kubectl
  - name: Set kernel for flannel
    become: yes
    shell: sysctl net.bridge.bridge-nf-call-iptables=1
  - name: Unset default DNS
    become: yes
    lineinfile:
      path: /etc/netplan/50-cloud-init.yaml
      line: "                - {{nameserver}}"
      state: absent
  - name: Set frontend DNS
    become: yes
    lineinfile:
      path: /etc/netplan/50-cloud-init.yaml
      line: "                - {{groups['clusterio'][0]}}"
      insertafter: "                addresses:"
      state: present
  - name: Apply DNS config
    become: yes
    shell: netplan apply
  - name: Set hostname with domain
    become: yes
    shell: hostnamectl set-hostname {{hostvars[inventory_hostname]['hostname']}}.{{cluster_type}}.{{stage}}.{{domain}}
  post_tasks:
  handlers:
